<?php

/**
 * @file
 * Add SMS verification to telephone number field.
 */

define('DEFAULT_VERIFICATION_MESSAGE_TEMPLATE', 'Your SMS verification code is [phone_sms_verify:verify_code]. This code will be expired in [phone_sms_verify:expire_time] minutes.');

/**
 * Implements hook_menu().
 */
function telephone_sms_verify_menu() {
  $items['admin/config/system/telephone-sms-verify'] = array(
    'title' => 'Telephone SMS Verify',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('telephone_sms_verify_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('telephone sms verify config'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function telephone_sms_verify_permission() {
  return array(
    'bypass telephone sms verify' => array(
      'title' => t('Bypass telephone sms code verification'),
      'restrict access' => TRUE,
    ),
    'telephone sms verify config' => array(
      'title' => t('telephone sms verify config'),
    ),
  );
}

/**
 * Global configuration form
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function telephone_sms_verify_admin_form($form, &$form_state) {
  $settings = array(
    'telephone_sms_verify_sms_template' => variable_get('telephone_sms_verify_sms_template', t(DEFAULT_VERIFICATION_MESSAGE_TEMPLATE)),
    'telephone_sms_verify_sms_code_expire' => variable_get('telephone_sms_verify_sms_code_expire', 30),
    'telephone_sms_verify_sms_code_length' => variable_get('telephone_sms_verify_sms_code_length', 6),
    'telephone_sms_verify_sms_code_count_down' => variable_get('telephone_sms_verify_sms_code_count_down', 30),
    'telephone_sms_verify_sms_code_max_request_per_hour' => variable_get('telephone_sms_verify_sms_code_max_request_per_hour', 2),
    'telephone_sms_verify_sms_code_max_request_per_day' => variable_get('telephone_sms_verify_sms_code_max_request_per_day', 5),
    'telephone_sms_verify_display_sms_code_verify' => variable_get('telephone_sms_verify_display_sms_code_verify', TRUE),
    'telephone_sms_verify_require_sms_code_verify_on_change' => variable_get('telephone_sms_verify_require_sms_code_verify_on_change', TRUE),
  );
  telephone_sms_verify_build_settings_form($form, $settings);
  return system_settings_form($form);
}

/**
 * Helper function for building settings_form
 *
 * @param $element
 * @param $settings
 */
function telephone_sms_verify_build_settings_form(&$element, $settings) {
  $element['telephone_sms_verify_sms_template'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS Template'),
    '#description' => t('The SMS template to send to the user.') . '<br />' . t('This field supports tokens.'),
    '#default_value' => $settings['telephone_sms_verify_sms_template'],
  );

  // Show available tokens
  $element['sms_template_tokens'] = array(
    '#theme' => 'token_tree',
    '#dialog' => TRUE,
    '#token_types' => array('phone_sms_verify'),
  );

  $element['telephone_sms_verify_sms_code_length'] = array(
    '#type' => 'textfield',
    '#size' => 6,
    '#title' => t('SMS Code Length'),
    '#maxlength' => 6,
    '#description' => t('The length of the SMS verification code'),
    '#default_value' => $settings['telephone_sms_verify_sms_code_length'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['telephone_sms_verify_sms_code_expire'] = array(
    '#type' => 'textfield',
    '#size' => 6,
    '#title' => t('SMS Code Expire'),
    '#maxlength' => 6,
    '#description' => t('The SMS verification time expiration time (in minutes).'),
    '#default_value' => $settings['telephone_sms_verify_sms_code_expire'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['telephone_sms_verify_sms_code_count_down'] = array(
    '#type' => 'textfield',
    '#size' => 6,
    '#title' => t('SMS Code Count Down'),
    '#maxlength' => 6,
    '#description' => t('The count down time (in seconds) until a new sms code can be sent.'),
    '#default_value' => $settings['telephone_sms_verify_sms_code_count_down'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['telephone_sms_verify_sms_code_max_request_per_hour'] = array(
    '#type' => 'textfield',
    '#title' => t('Telephone SMS verify limitation per hour'),
    '#maxlength' => 6,
    '#description' => t('Telephone SMS verify limitation per hour'),
    '#default_value' => $settings['telephone_sms_verify_sms_code_max_request_per_hour'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['telephone_sms_verify_sms_code_max_request_per_day'] = array(
    '#type' => 'textfield',
    '#title' => t('Telephone SMS verify limitation per day'),
    '#maxlength' => 6,
    '#description' => t('Telephone SMS verify limitation per day'),
    '#default_value' => $settings['telephone_sms_verify_sms_code_max_request_per_day'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['telephone_sms_verify_display_sms_code_verify'] = array(
    '#title' => t('Display SMS code verify'),
    '#type' => 'radios',
    '#description' => t('Display SMS code verify'),
    '#options' => array( TRUE => t('Yes'), FALSE => t('No')),
    '#default_value' => $settings['telephone_sms_verify_display_sms_code_verify'],
  );

  $element['telephone_sms_verify_require_sms_code_verify_on_change'] = array(
    '#title' => t('Require SMS code verify on change'),
    '#type' => 'radios',
    '#description' => t('Require SMS code verify on change'),
    '#options' => array( TRUE => t('Yes'), FALSE => t('No')),
    '#default_value' => $settings['telephone_sms_verify_require_sms_code_verify_on_change'],
  );
}

/**
 * Implements hook_field_widget_info().
 */
function telephone_sms_verify_field_widget_info() {
  return array(
    'telephone_sms_verify' => array(
      'label' => t('Telephone number with SMS verification'),
      'settings' => array(
        'widget' => TRUE,
        'placeholder' => t('Phone Number'),
        'captcha' => TRUE,
        'captcha_type' => 'default',
        'telephone_sms_verify_sms_template' => variable_get('telephone_sms_verify_sms_template', DEFAULT_VERIFICATION_MESSAGE_TEMPLATE),
        'telephone_sms_verify_sms_code_expire' => variable_get('telephone_sms_verify_sms_code_expire', 30),
        'telephone_sms_verify_sms_code_length' => variable_get('telephone_sms_verify_sms_code_length', 6),
        'telephone_sms_verify_sms_code_count_down' => variable_get('telephone_sms_verify_sms_code_count_down', 30),
        'telephone_sms_verify_sms_code_max_request_per_hour' => variable_get('telephone_sms_verify_sms_code_max_request_per_hour', 2),
        'telephone_sms_verify_sms_code_max_request_per_day' => variable_get('telephone_sms_verify_sms_code_max_request_per_day', 5),
        'telephone_sms_verify_display_sms_code_verify' => variable_get('telephone_sms_verify_display_sms_code_verify', TRUE),
        'telephone_sms_verify_require_sms_code_verify_on_change' => variable_get('telephone_sms_verify_require_sms_code_verify_on_change', TRUE),
        'sms_code_verify_not_displayed_forms' => '',
        'sms_code_verify_required_on_phone_changes_forms' => 'user_profile_form',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'field types' => array('telephone'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function telephone_sms_verify_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $form_id = $form_state['build_info']['form_id'];

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // Do not show sms code verify element on field settings page
  if (empty($element['#entity'])) {
    $settings['telephone_sms_verify_display_sms_code_verify'] = FALSE;
  }

  // Allow to hide sms code verify element in specific forms
  if (in_array($form_id, _telephone_sms_verify_explode_multi_lines($settings['sms_code_verify_not_displayed_forms']))) {
    $settings['telephone_sms_verify_display_sms_code_verify'] = FALSE;
  }

  // Allow to mark sms code verify not required on specific forms
  if (in_array($form_id, _telephone_sms_verify_explode_multi_lines($settings['sms_code_verify_required_on_phone_changes_forms']))) {
    $settings['telephone_sms_verify_require_sms_code_verify_on_change'] = FALSE;
  }

  $element += array(
    '#type' => 'telephone_with_sms_verify',
    '#settings' => $settings,
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
  );

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function telephone_sms_verify_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function telephone_sms_verify_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element['placeholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Placeholder'),
    '#access' => module_exists('elements') || module_exists('placeholder'),
    '#description' => t('The placeholder is a short hint (a word or short phrase) intended to aid the user with data entry. A hint could be a sample value or a brief description of the expected format.'),
    '#default_value' => $settings['placeholder'],
  );

  telephone_sms_verify_build_settings_form($element, $settings);

  $element['sms_code_verify_not_displayed_forms'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS Code Verify Not Required Forms'),
    '#description' => t('Form IDs that do not require SMS code verification. Fill with a drupal form id in each line.'),
    '#default_value' => $settings['sms_code_verify_not_displayed_forms'],
  );

  $element['sms_code_verify_required_on_phone_changes_forms'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS Code Verify Required Only if Phone Changes Forms'),
    '#description' => t('Form IDs that only requires SMS code verification if the phone number has changed. Fill with a drupal form id in each line.'),
    '#default_value' => $settings['sms_code_verify_required_on_phone_changes_forms'],
  );

  return $element;
}

/**
 * AJAX callback for the form AJAX operation
 *
 * @param $form
 * @param $form_state
 * @return array
 * @throws \Exception
 */
function telephone_sms_verify_ajax_callback($form, $form_state) {
  if (preg_match('/captcha-verify-op$/', $form_state['triggering_element']['#name'])) {
    $path = implode('/', array_slice($form_state['triggering_element']['#array_parents'], 0, -3));
  }
  else {
    $path = implode('/', array_slice($form_state['triggering_element']['#array_parents'], 0, -1));
  }
  $parent_element = _telephone_sms_verify_get_element_by_array_path($form, $path);

  $settings = $parent_element['#settings'];
  $phone_number = _telephone_sms_verify_format_default_value($parent_element['#value']);
  if ($settings['widget']) {
    $phone_number = $phone_number['value'];
  }

  $commands = array();

  // if there are errors on phone number element
  if (empty($phone_number) || form_get_error($parent_element['value'])) {
    // Clear all messages errors
    $commands[] = ajax_command_remove('#messages');
    // Show error messages before the AJAX wrapper element
    $commands[] = ajax_command_before(NULL, theme('status_messages'));
    // Update the AJAX wrapper element
    $commands[] = ajax_command_replace(NULL, drupal_render($parent_element['value']));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $id_prefix = implode('-', preg_replace('$_$', '-', $parent_element['#array_parents']));

  if ($settings['captcha'] && module_exists('captcha')) {
    if ($form_state['triggering_element']['#name'] == $id_prefix . '-send-smscode-btn-op' || isset($parent_element['smscode_captcha']['container']) && form_get_error($parent_element['smscode_captcha']['container']['captcha']['captcha_widgets']['captcha_response'])) {
      // Clear all messages errors
      $commands[] = ajax_command_remove('#messages');
      $commands[] = ajax_command_replace(NULL, drupal_render($parent_element['value']));
      $commands[] = ajax_command_replace('#' . $id_prefix . '-captcha-wrapper', drupal_render($parent_element['smscode_captcha']));
      // Show error messages before the AJAX wrapper element
      $commands[] = ajax_command_after('.' . $id_prefix . '-smscode-captcha-container .form-item-captcha-response', theme('status_messages'));
      return array('#type' => 'ajax', '#commands' => $commands);
    }
    else {
      $commands[] = ajax_command_replace('#' . $id_prefix . '-captcha-wrapper', '<div id="' . $id_prefix . '-captcha-wrapper"></div>');
    }
  }

  //Compute session key
  $form_id = $form_state['values']['form_id'];

  $expire = $settings['telephone_sms_verify_sms_code_expire'];
  $length = $settings['telephone_sms_verify_sms_code_length'];

  $record['code'] = sprintf('%0' . $length . 'd', rand(0, (int) str_repeat('9', $length)));
  $record['created'] = time();

  // Get SMS verification template from field widget settings
  $template = t($settings['telephone_sms_verify_sms_template']);

  // Set default value is no template is configured
  if (empty($template)) {
    $template = t(DEFAULT_VERIFICATION_MESSAGE_TEMPLATE);
  }

  $template = token_replace($template, array(
    'phone_sms_verify' => array(
      'verify_code' => $record['code'],
      'expire_time' => $expire,
    ),
  ));

  // Send SMS verification code using SMS Framework
  sms_send($phone_number, $template);

  $record['phone'] = $phone_number;
  $record['form_id'] = $form_id;
  $record['sent'] = time();
  $record['content'] = $template;
  drupal_write_record('telephone_sms_verify_history', $record);

  // Clear all messages errors
  $commands[] = ajax_command_remove('#messages');
  // Update the AJAX wrapper element
  $commands[] = ajax_command_replace(NULL, drupal_render($parent_element['value']));
  // Trigger javascript messages send countdown
  $commands[] = ajax_command_invoke(NULL, 'DrupalTelephoneSMSVerifyCountDown', array(
    '#' . $id_prefix . '-send-smscode-btn',
    '#' . $id_prefix . '-send-smscode-count-down',
  ));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Validation callback to verify 'telephone_with_sms_verify' form element
 *
 * We use this callback to set the value fo this element from the sub 'value'
 * element.
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function telephone_sms_verify_validate($element, &$form_state, $form) {
  form_set_value($element, $element['#value'], $form_state);
}

/**
 * Validation callback to verify the telephone number
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function telephone_sms_verify_value_validate($element, &$form_state, $form) {
  $path = implode('/', array_slice($element['#array_parents'], 0, -1));
  $parent_element = _telephone_sms_verify_get_element_by_array_path($form, $path);
  $parent_element_state = _telephone_sms_verify_get_element_by_array_path($form_state['values'], $path);

  $id_prefix = implode('-', preg_replace('$_$', '-', $parent_element['#array_parents']));

  // Only validate when smscode verification button clicked
  if ($form_state['triggering_element']['#name'] != $id_prefix . '-send-smscode-btn-op') {
    return;
  }

  $settings = $parent_element['#settings'];
  $phone_number = _telephone_sms_verify_format_default_value($parent_element_state['value']);
  if ($settings['widget'] && isset($phone_number['value'])) {
    $phone_number = $phone_number['value'];
  }
  $phone_number_default = _telephone_sms_verify_format_default_value($parent_element['#default_value']);

  if (!$settings['telephone_sms_verify_display_sms_code_verify']) {
    return;
  }

  //Compute session key
  $form_id = $form_state['values']['form_id'];

  // Do not send sms verification code on account editing page and the phone number is not changed
  if ($settings['telephone_sms_verify_require_sms_code_verify_on_change'] && $phone_number == $phone_number_default) {
    form_error($element, t('Your phone number has not changed, no SMS verification code is sent.'));
  }

  $max_request_per_hour = $settings['telephone_sms_verify_sms_code_max_request_per_hour'];
  $max_request_per_day = $settings['telephone_sms_verify_sms_code_max_request_per_day'];

  $max_request_per_hour_in_db = db_select('telephone_sms_verify_history', 'h')
    ->fields('h', array('hid'))
    ->condition('sent', time() - 3600, '>=')
    ->condition('phone', $phone_number)
    ->condition('form_id', $form_id)
    ->execute()
    ->rowCount();

  $max_request_per_day_in_db = db_select('telephone_sms_verify_history', 'h')
    ->fields('h', array('hid'))
    ->condition('sent', time() - 86400, '>=')
    ->condition('phone', $phone_number)
    ->condition('form_id', $form_id)
    ->execute()
    ->rowCount();

  if ($max_request_per_hour_in_db >= $max_request_per_hour) {
    form_error($element, t('You have reached the maximum request limitation in this hour.'));
  }
  elseif ($max_request_per_day_in_db >= $max_request_per_day) {
    form_error($element, t('You have reached the maximum request limitation in this day.'));
  }
}

/**
 * Validation callback to verify the sms code
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function telephone_sms_verify_smscode_validate($element, &$form_state, $form) {
  $path = implode('/', array_slice($element['#array_parents'], 0, -1));

  $parent_element = _telephone_sms_verify_get_element_by_array_path($form, $path);
  $parent_element_state = _telephone_sms_verify_get_element_by_array_path($form_state['values'], $path);

  $settings = $parent_element['#settings'];
  $phone_number = _telephone_sms_verify_format_default_value($parent_element_state['value']);
  if ($settings['widget'] && isset($phone_number['value'])) {
    $phone_number = $phone_number['value'];
  }
  $phone_number_default = isset($parent_element['value']['#default_value']) ? $parent_element['value']['#default_value'] : '';

  // Only validates this field if the telephone number is newly added or changed
  if ($phone_number != $phone_number_default) {
    if (empty($element['#value'])) {
      form_error($element, t('This field is required.'));
    }

    //Compute session key
    $form_id = $form_state['values']['form_id'];

    $expire = $settings['telephone_sms_verify_sms_code_expire'];

    $result = db_select('telephone_sms_verify_history', 'h')
      ->fields('h', array('code', 'created'))
      ->condition('phone', $phone_number)
      ->condition('form_id', $form_id)
      ->orderBy('sent', 'DESC')
      ->range(0, 1)
      ->execute()
      ->fetchAssoc();

    if (empty($result) || $element['#value'] != $result['code']) {
      form_error($element, t('Your SMS verification code is not right'));
    }
    elseif ($result['created'] + 60 * $expire < time()) {
      form_error($element, t('This SMS code has expired.'));
    }
  }
}

/**
 * Explode a multi lines string into an array
 *
 * @param $lines string
 *
 * @return array
 */
function _telephone_sms_verify_explode_multi_lines($lines) {
  return explode("\n", str_replace("\r", "", $lines));
}

/**
 * Helper function to set a default value
 *
 * @param mixed $current
 * @param mixed $default
 * @return mixed
 */
function _telephone_sms_verify_format_default_value($current, $default = '') {
  return isset($current) ? $current : $default;
}

/**
 * Implements hook_element_info().
 */
function telephone_sms_verify_element_info() {
  $type['telephone_with_sms_verify'] = array(
    '#tree' => TRUE,
    '#input' => TRUE,
    '#required' => FALSE,
    '#process' => array(
      '_telephone_sms_verify_element_expand',
      'form_process_container',
    ),
    '#description' => t('Telephone number'),
    '#default_value' => '',
    '#theme_wrappers' => array('container'),
    '#default_settings' => array(
      'widget' => FALSE,
      'placeholder' => t('Phone Number'),
      'captcha' => TRUE,
      'captcha_type' => 'default',
      'telephone_sms_verify_sms_template' => variable_get('telephone_sms_verify_sms_template', DEFAULT_VERIFICATION_MESSAGE_TEMPLATE),
      'telephone_sms_verify_sms_code_expire' => variable_get('telephone_sms_verify_sms_code_expire', 30),
      'telephone_sms_verify_sms_code_length' => variable_get('telephone_sms_verify_sms_code_length', 6),
      'telephone_sms_verify_sms_code_count_down' => variable_get('telephone_sms_verify_sms_code_count_down', 30),
      'telephone_sms_verify_sms_code_max_request_per_hour' => variable_get('telephone_sms_verify_sms_code_max_request_per_hour', 2),
      'telephone_sms_verify_sms_code_max_request_per_day' => variable_get('telephone_sms_verify_sms_code_max_request_per_day', 5),
      'telephone_sms_verify_display_sms_code_verify' => variable_get('telephone_sms_verify_display_sms_code_verify', TRUE),
      'telephone_sms_verify_require_sms_code_verify_on_change' => variable_get('telephone_sms_verify_require_sms_code_verify_on_change', TRUE),
    ),
    '#value_callback' => '_telephone_sms_verify_element_value',
    '#element_validate' => array('telephone_sms_verify_validate'),
  );
  return $type;
}

/**
 * Value callback for 'telephone_with_sms_verify' form element
 *
 * @param $element
 * @param $input
 * @param $form_state
 * @return mixed
 */
function _telephone_sms_verify_element_value($element, $input, $form_state) {
  if ($element['#settings']['widget']) {
    return $input;
  }
  else {
    return $input['value'];
  }
}

/**
 * Helper function to expand the 'telephone_with_sms_verify' form element
 *
 * @param $element
 * @param $form_state
 * @param $complete_form
 * @return mixed
 */
function _telephone_sms_verify_element_expand($element, &$form_state, $complete_form) {
  if (!isset($element['#settings'])) {
    $element['#settings'] = array();
  }
  $element['#settings'] += $element['#default_settings'];
  $settings = $element['#settings'];

  $settings['telephone_sms_verify_display_sms_code_verify'] &= !user_access('bypass telephone sms verify');

  // Give user a chance finally alter the sms code verify element behavior
  $context = array(
    'element' => $element,
    'form' => $complete_form,
    'form_state' => $form_state,
  );
  drupal_alter('sms_code_verify_element_settings', $settings, $context);

  $id_prefix = implode('-', preg_replace('$_$', '-', $element['#array_parents']));

  $element['value'] = array(
    '#type' => module_exists('elements') ? 'telfield' : 'textfield',
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#maxlength' => isset($element['#maxlength']) ? $element['#maxlength'] : 11,
    '#description' => $element['#description'],
    '#default_value' => $element['#default_value'],
    '#weight' => 0,
    '#prefix' => '<div id="' . $id_prefix . '-value-wrapper">',
    '#suffix' => '</div>',
    '#attributes' => $element['#attributes'],
    '#placeholder' => $settings['placeholder'],
    '#element_validate' => array('telephone_sms_verify_value_validate'),
  );

  if (isset($complete_form['#form_placeholder'])) {
    $element['value']['#form_placeholder'] = $complete_form['#form_placeholder'];
  }

  if ($settings['telephone_sms_verify_display_sms_code_verify']) {
    $element['smscode_captcha'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="' . $id_prefix . '-captcha-wrapper">',
      '#suffix' => '</div>',
    );
    if ($settings['captcha'] && module_exists('captcha') && $_GET['q'] == 'system/ajax' &&
      (
        // We need captcha to be presented in the ajax form rebuild stage, but not when the captcha verify button is clicked, because next step is to submit the entire form, and we do not want to validate the capture element in this step.
        $form_state['rebuild'] == TRUE && $form_state['triggering_element']['#name'] != $id_prefix . '-captcha-verify-op' ||
        // We need captcha to be presented in the normal form build stage so that the captcha can be validated only when not in the form submit process
        $form_state['rebuild'] == FALSE && (!isset($form_state['triggering_element']) || $form_state['triggering_element']['#name'] != 'op')
      )
    ) {
      $element['smscode_captcha']['#attached'] = array(
        'js' => array(
          drupal_get_path('module', 'telephone_sms_verify') . '/telephone_sms_verify.js',
        ),
        'css' => array(
          drupal_get_path('module', 'telephone_sms_verify') . '/telephone_sms_verify.css',
        ),
      );
      $element['smscode_captcha']['overlay'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'smscode-captcha-overlay',
            $id_prefix . '-smscode-captcha-overlay',
          ),
        ),
      );

      $element['smscode_captcha']['container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'smscode-captcha-container',
            $id_prefix . '-smscode-captcha-container',
          ),
        ),
      );

      $element['smscode_captcha']['container']['close'] = array(
        '#markup' => '<a class="boxclose" data-id="' . $id_prefix . '"></a>',
      );

      $element['smscode_captcha']['container']['captcha'] = array(
        '#type' => 'captcha',
        '#captcha_type' => $settings['captcha_type'],
      );

      if (module_exists('image_captcha_refresh')) {
        $element['smscode_captcha']['container']['captcha']['#after_build'][] = '_telephone_sms_verify_image_captcha_refresh_after_build_process';
        $element['smscode_captcha']['container']['captcha']['#attached']['js'][] = drupal_get_path('module', 'image_captcha_refresh') . '/image_captcha_refresh.js';
      }

      $element['smscode_captcha']['container']['verify'] = array(
        '#name' => $id_prefix . '-captcha-verify-op',
        '#type' => 'button',
        '#ajax' => array(
          'wrapper' => $id_prefix . '-value-wrapper',
          'callback' => 'telephone_sms_verify_ajax_callback',
        ),
        '#value' => t('Verify'),
        '#limit_validation_errors' => array(
          array('captcha_response'),
          array_merge($element['#array_parents'], array('value')),
          array_merge($element['#array_parents'], array(
            'smscode_captcha',
            'container',
            'captcha',
          )),
        ),
      );
    }

    $element['smscode'] = array(
      '#type' => 'textfield',
      '#size' => 6,
      '#title' => t('SMS Code'),
      '#weight' => 1,
      '#prefix' => '<div id="' . $id_prefix . '-sms-verification-code-wrapper" class="sms-verification-code">',
      '#element_validate' => array('telephone_sms_verify_smscode_validate'),
      '#required' => $settings['telephone_sms_verify_require_sms_code_verify_on_change'],
    );

    $element['send_smscode'] = array(
      '#name' => $id_prefix . '-send-smscode-btn-op',
      '#type' => 'button',
      '#ajax' => array(
        'wrapper' => $id_prefix . '-value-wrapper',
        'callback' => 'telephone_sms_verify_ajax_callback',
      ),
      '#value' => t('Send SMS Code'),
      '#weight' => 2,
      '#prefix' => '<div id="' . $id_prefix . '-send-smscode-btn-wrapper"><div id="' . $id_prefix . '-send-smscode-btn">',
      '#suffix' => '</div><div id="' . $id_prefix . '-send-smscode-count-down"></div></div></div>',
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'telephone_sms_verify') . '/telephone_sms_verify.js',
          array(
            'data' => array('smscode_count_down' => $settings['telephone_sms_verify_sms_code_count_down']),
            'type' => 'setting',
          ),
        ),
      ),
      '#limit_validation_errors' => array(
        // Validate only the phone number field on AJAX call
        array_merge($element['#array_parents'], array('value')),
      ),
      '#submit' => array(),
    );
  }

  return $element;
}

/**
 * Helper function to get a sub-element by its key path
 *
 * @param $arr
 * @param $path
 * @return null
 */
function _telephone_sms_verify_get_element_by_array_path($arr, $path) {
  if (!$path) {
    return NULL;
  }

  $segments = is_array($path) ? $path : explode('/', $path);

  $cur = &$arr;

  foreach ($segments as $segment) {
    if (!isset($cur[$segment])) {
      return NULL;
    }

    $cur = $cur[$segment];
  }

  return $cur;
}

/**
 * Add image refresh button to captcha form element
 *
 * @return
 *   The processed element.
 *
 * @see captcha_element_info()
 * @see image_captcha_refresh_element_info_alter()
 */
function _telephone_sms_verify_image_captcha_refresh_after_build_process($element, $form_state) {
  $form_id = $element['#captcha_info']['form_id'];
  if (isset($element['captcha_widgets']['captcha_image'])) {
    $element['captcha_widgets']['captcha_refresh'] = array(
      '#markup' => theme('image_captcha_refresh_link', array('url' => 'captcha/refresh/' . $form_id)),
    );
  }
  return $element;
}
